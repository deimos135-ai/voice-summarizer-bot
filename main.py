import os, asyncio, httpx
from fastapi import FastAPI, Request, HTTPException
from aiogram import Bot, Dispatcher, Router, types, F
from aiogram.enums import ParseMode
from aiogram.types import Update
from aiogram.client.default import DefaultBotProperties

from util import now_tz, today_bounds, TZ
from db import init_db, add_note, get_notes_between
from ai import whisper_transcribe, analyze_notes_text, render_daily_summary

APP_URL = os.getenv("APP_URL")            # https://<your-app>.fly.dev
BOT_TOKEN = os.getenv("TG_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
GROUP_ID = os.getenv("GROUP_ID")          # –∫—É–¥–∏ –∫–∏–¥–∞—Ç–∏ —â–æ–¥–µ–Ω–Ω–∏–π –∑–≤—ñ—Ç (—ñ–¥ –≥—Ä—É–ø–∏/–∫–∞–Ω–∞–ª—É, —Ç–∏–ø—É -100123456789)
WEBHOOK_SECRET = os.getenv("WEBHOOK_SECRET", "secret-path")  # –¥–æ–≤—ñ–ª—å–Ω–∏–π —Å–µ–∫—Ä–µ—Ç —É URL –≤–µ–±—Ö—É–∫–∞
RUN_DAILY = os.getenv("RUN_DAILY", "1")   # "1" –≤–º–∏–∫–∞—î –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫ —É—Å–µ—Ä–µ–¥–∏–Ω—ñ –ø—Ä–æ—Ü–µ—Å—É

if not (APP_URL and BOT_TOKEN and OPENAI_API_KEY and GROUP_ID):
    raise RuntimeError("APP_URL, TG_TOKEN, OPENAI_API_KEY, GROUP_ID —î –æ–±–æ–≤'—è–∑–∫–æ–≤–∏–º–∏ env")

bot = Bot(BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.MARKDOWN))
dp = Dispatcher()
router = Router()
dp.include_router(router)

app = FastAPI()

@router.message(F.voice)
async def handle_voice(message: types.Message):
    # 1) –∑–∞–±—Ä–∞—Ç–∏ —Ñ–∞–π–ª
    f = await bot.get_file(message.voice.file_id)
    file_url = f"https://api.telegram.org/file/bot{BOT_TOKEN}/{f.file_path}"
    async with httpx.AsyncClient(timeout=60) as client:
        r = await client.get(file_url)
        r.raise_for_status()
        file_bytes = r.content

    # 2) —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü—ñ—è Whisper
    text = await whisper_transcribe(file_bytes, filename=os.path.basename(f.file_path), language="uk")

    # 3) –∑–±–µ—Ä–µ–≥—Ç–∏
    await add_note(str(message.from_user.id), str(message.chat.id), text, now_tz())

    # 4) –∫–æ—Ä–æ—Ç–∫–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
    preview = (text[:200] + "‚Ä¶") if len(text) > 200 else text
    await message.reply(f"‚úÖ –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–æ–≤–∞–Ω–æ:\n_{preview}_")

@router.message(F.text == "/today")
async def cmd_today(message: types.Message):
    start, end = today_bounds()
    rows = await get_notes_between(str(message.chat.id), start, end)
    if not rows:
        await message.reply("–°—å–æ–≥–æ–¥–Ω—ñ —â–µ –Ω–µ–º–∞ –Ω–æ—Ç–∞—Ç–æ–∫.")
        return
    formatted = "\n\n".join([f"üïò {r[4]}:\n{r[3]}" for r in rows])
    await message.reply(f"–ù–æ—Ç–∞—Ç–∫–∏ –∑–∞ —Å—å–æ–≥–æ–¥–Ω—ñ:\n\n{formatted}")

async def set_webhook():
    # –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –≤–µ–±—Ö—É–∫ –Ω–∞ APP_URL/WEBHOOK_SECRET
    url = f"https://api.telegram.org/bot{BOT_TOKEN}/setWebhook"
    target = f"{APP_URL}/{WEBHOOK_SECRET}"
    async with httpx.AsyncClient(timeout=30) as client:
        r = await client.post(url, json={"url": target, "allowed_updates": ["message"]})
        r.raise_for_status()

@app.on_event("startup")
async def on_startup():
    await init_db()
    await set_webhook()
    if RUN_DAILY == "1":
        asyncio.create_task(daily_summary_loop())

@app.post("/{token_path}")
async def telegram_webhook(token_path: str, request: Request):
    if token_path != WEBHOOK_SECRET:
        raise HTTPException(status_code=404)
    data = await request.json()
    update = Update.model_validate(data)
    await dp.feed_update(bot, update)
    return {"ok": True}

async def daily_summary_loop():
    # –≤–Ω—É—Ç—Ä—ñ—à–Ω—ñ–π –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫: —â–æ–¥–Ω—è –æ 20:00 Europe/Kyiv
    while True:
        now = now_tz()
        run_at = now.replace(hour=20, minute=0, second=0, microsecond=0)
        if now >= run_at:
            # –Ω–∞—Å—Ç—É–ø–Ω–∏–π –¥–µ–Ω—å
            from datetime import timedelta
            run_at = run_at + timedelta(days=1)
        await asyncio.sleep((run_at - now).total_seconds())
        try:
            # –ì–æ—Ç—É—î–º–æ –∑–≤–µ–¥–µ–Ω–Ω—è –∑–∞ —Å—å–æ–≥–æ–¥–Ω—ñ –¥–ª—è —Ü—å–æ–≥–æ GROUP_ID
            start, end = today_bounds()
            rows = await get_notes_between(str(GROUP_ID), start, end)
            # –Ø–∫—â–æ –Ω–æ—Ç–∞—Ç–∫–∏ –≤ –ø—Ä–∏–≤–∞—Ç–∞—Ö ‚Äî –º–æ–∂–µ—à –≤–∏—Ä—ñ—à–∏—Ç–∏ –∑–≤–æ–¥–∏—Ç–∏ –ø–æ –≤—Å—ñ—Ö —á–∞—Ç–∞—Ö. –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç–∏ –±–µ—Ä–µ–º–æ –ø–æ –≥—Ä—É–ø—ñ:
            # (–ê–±–æ –∑–±–µ—Ä–∏ –ø–æ –≤—Å—ñ—Ö —á–∞—Ç–∞—Ö —Ç–∞ –≤–∫–∞–∂–∏ –∞–≤—Ç–æ—Ä–∞)
            if not rows:
                # —Å–ø—Ä–æ–±—É—î–º–æ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—É: –∑–≤–æ–¥–∏—Ç–∏ –í–°–Ü –Ω–æ—Ç–∞—Ç–∫–∏, –Ω–µ —Ç—ñ–ª—å–∫–∏ –∑ –≥—Ä—É–ø–∏
                # (–¥–ª—è MVP –º–æ–∂–Ω–∞ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–∏; –∑–∞–ª–∏—à–∏–º–æ —è–∫ —î)
                pass
            texts = []
            authors = set()
            for _, user_id, chat_id, text, created_at in rows:
                texts.append(f"[{created_at}] {text}")
                authors.add(user_id)
            if not texts:
                await bot.send_message(int(GROUP_ID), f"**–ó–≤—ñ—Ç –∑–∞ {now.date().isoformat()}**: –±–µ–∑ –Ω–æ–≤–∏—Ö –Ω–æ—Ç–∞—Ç–æ–∫.")
                continue
            concat = "\n".join(texts)
            analysis = await analyze_notes_text(concat)
            author_str = "–∫—ñ–ª—å–∫–∞ —É—á–∞—Å–Ω–∏–∫—ñ–≤" if len(authors) > 1 else next(iter(authors))
            rendered = render_daily_summary(now.date().isoformat(), author_str, analysis)
            await bot.send_message(int(GROUP_ID), rendered)
        except Exception as e:
            # –Ω–µ –ø–∞–¥–∞—î–º–æ —á–µ—Ä–µ–∑ –∑–±—ñ–π –æ–¥–Ω–æ–≥–æ —Ü–∏–∫–ª—É
            await bot.send_message(int(GROUP_ID), f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∑–≤—ñ—Ç—É: {e}")
            continue
